import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI
import org.springframework.boot.gradle.tasks.bundling.BootJar

// restdocsApiSpecVersion 버전 변수 설정
buildscript {
    ext {
        restdocsApiSpecVersion = '0.17.1'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'

    // rest docs 플러그인
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    // swagger 플러그인
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.backend'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// for cloud config
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    set('springCloudVersion', "2023.0.2")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // cloud config
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'

    // database
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'it.ozimov:embedded-redis:0.7.2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    // oauth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    // smtp
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // for email send test
    testImplementation("com.icegreen:greenmail-junit5:2.0.1")

    // spring rest docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.4'

    // swagger ui
    swaggerUI 'org.webjars:swagger-ui:4.11.1'

}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


tasks.named('test') {
    useJUnitPlatform()
}


swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

openapi3 {
    setServer("http://localhost:8080") // API 요청을 보낼 서버 주소 설정
    title = "Account Management API Docs" // API 문서 제목
    description = "펫미팅 회원관리 API 문서" // API 문서 설명
    version = "0.0.1" // API 문서 버전
    format = "yaml" // API 문서 출력 포맷 (default = JSON)
}


tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

        def securitySchemesContent = "  securitySchemes:\n" +   \
                                       "    APIKey:\n" +   \
                                       "      type: apiKey\n" +   \
                                       "      name: Authorization\n" +   \
                                       "      in: header\n" +  \
                                       "security:\n" +
                "  - APIKey: []  # Apply the security scheme here"

        swaggerUIFile.append securitySchemesContent
    }
}


// 생성된 SwaggerUI 를 jar 에 포함시키기 위해 build/resources 경로로 로 복사
tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUISample'

    def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()

    from("${generateSwaggerUISampleTask.outputDir}")
    into("src/main/resources/static/docs")
}


// bootJar 실행 전, copySwaggerUI 를 실행하도록 설정
tasks.withType(BootJar) {
    dependsOn 'copySwaggerUI'
}
