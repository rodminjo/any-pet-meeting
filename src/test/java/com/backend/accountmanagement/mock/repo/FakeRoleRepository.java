package com.backend.accountmanagement.mock.repo;

import com.backend.accountmanagement.account.domain.Role;
import com.backend.accountmanagement.account.service.port.RoleRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import lombok.Setter;

@Setter
public class FakeRoleRepository implements RoleRepository {

  private final AtomicLong autoGeneratedId = new AtomicLong(0);
  private final List<Role> data = Collections.synchronizedList(new ArrayList<>());



  @Override
  public Optional<Role> findByRoleName(String roleName) {
    return data.stream()
        .filter(role -> role.getRoleName().equals(roleName))
        .findFirst();

  }

  @Override
  public Role save(Role role) {
    if (role.getId() == 0) {
      Role newRole = Role.builder()
          .id(autoGeneratedId.incrementAndGet())
          .roleName(role.getRoleName())
          .roleDesc(role.getRoleDesc())
          .build();

      data.add(newRole);
      return newRole;

    } else {
      data.removeIf(item -> Objects.equals(item.getId(), role.getId()));
      data.add(role);
      return role;

    }
  }
}
