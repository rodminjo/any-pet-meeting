package com.backend.accountmanagement.mock.repo;

import com.backend.accountmanagement.account.domain.Account;
import com.backend.accountmanagement.account.domain.AccountSNS;
import com.backend.accountmanagement.account.domain.SNSProvider;
import com.backend.accountmanagement.account.service.port.AccountRepository;
import com.backend.accountmanagement.account.service.port.AccountSNSRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import lombok.Setter;

@Setter
public class FakeAccountSNSRepository implements AccountSNSRepository {

  private final AtomicLong autoGeneratedId = new AtomicLong(0);
  private final List<AccountSNS> data = Collections.synchronizedList(new ArrayList<>());

  @Override
  public Optional<AccountSNS> findByEmailAndProvider(String email, SNSProvider provider) {
    return data.stream()
        .filter(sns -> sns.getEmail().equals(email) && sns.getProvider().equals(provider))
        .findFirst();

  }

  @Override
  public AccountSNS save(AccountSNS accountSNS) {
    if (accountSNS.getId() == 0) {
      AccountSNS newSNS = AccountSNS.builder()
          .id(autoGeneratedId.incrementAndGet())
          .email(accountSNS.getEmail())
          .provider(accountSNS.getProvider())
          .providerAccountId(accountSNS.getProviderAccountId())
          .build();

      data.add(newSNS);
      return newSNS;

    } else {
      data.removeIf(item -> Objects.equals(item.getId(), accountSNS.getId()));
      data.add(accountSNS);
      return accountSNS;

    }
  }

}
