package com.backend.accountmanagement.mock.repo;

import com.backend.accountmanagement.account.domain.Resource;
import com.backend.accountmanagement.account.service.port.ResourceRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeResourceRepository implements ResourceRepository {

  private final AtomicLong autoGeneratedId = new AtomicLong(0);
  private final List<Resource> data = Collections.synchronizedList(new ArrayList<>());


  @Override
  public List<Resource> findAllResources() {
    return new ArrayList<>(data);
  }

  @Override
  public Resource save(Resource resource) {
    if (resource.getId() == 0) {
      Resource newResource = Resource.builder()
          .id(autoGeneratedId.incrementAndGet())
          .resourceName(resource.getResourceName())
          .resourceType(resource.getResourceType())
          .httpMethod(resource.getHttpMethod())
          .orderNum(resource.getOrderNum())
          .build();
      newResource.getRoleSet().addAll(resource.getRoleSet());

      data.add(newResource);
      return newResource;

    } else {
      data.removeIf(item -> Objects.equals(item.getId(), resource.getId()));
      data.add(resource);
      return resource;

    }
  }
}
