package com.backend.accountmanagement.mock.repo;

import com.backend.accountmanagement.account.domain.RefreshToken;
import com.backend.accountmanagement.account.service.port.RefreshTokenRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeRefreshTokenRepository implements RefreshTokenRepository {

  private final AtomicLong autoGeneratedId = new AtomicLong(0);
  private final List<RefreshToken> data = Collections.synchronizedList(new ArrayList<>());

  @Override
  public RefreshToken getByEmail(String email) {
    return findByEmail(email)
        .orElseThrow(()->new IllegalArgumentException("Not Found"));
  }

  @Override
  public Optional<RefreshToken> findByEmail(String email) {
    return data.stream()
        .filter(token -> token.getEmail().equals(email))
        .findFirst();
  }

  @Override
  public Optional<RefreshToken> findByRefreshToken(String refreshToken) {
    return data.stream()
        .filter(token -> token.getRefreshToken().equals(refreshToken))
        .findFirst();
  }

  @Override
  public RefreshToken save(RefreshToken refreshToken) {
    if (refreshToken.getId() == 0) {
      RefreshToken newToken = RefreshToken.builder()
          .id(autoGeneratedId.incrementAndGet())
          .email(refreshToken.getEmail())
          .refreshToken(refreshToken.getRefreshToken())
          .build();

      data.add(newToken);
      return newToken;

    } else {
      data.removeIf(item -> Objects.equals(item.getId(), refreshToken.getId()));
      data.add(refreshToken);
      return refreshToken;

    }
  }
}
